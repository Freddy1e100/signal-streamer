import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import mplfinance as mpf
from binance.client import Client
from ta.momentum import StochRSIIndicator
import datetime

# Binance API ‚Äî public
client = Client()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(page_title="Crypto Signals", layout="wide")
st.title("üìà –ö—Ä–∏–ø—Ç–æ —Å–∏–≥–Ω–∞–ª—ã")

# –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
timeframe = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º", ["1h", "4h", "1d"])
interval_map = {
    "1h": Client.KLINE_INTERVAL_1HOUR,
    "4h": Client.KLINE_INTERVAL_4HOUR,
    "1d": Client.KLINE_INTERVAL_1DAY,
}

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.experimental_rerun()

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
show_neutral = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", value=True)

# –ü–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "PAXGUSDT"]

def get_data(symbol, interval, lookback="100"):
    klines = client.get_klines(symbol=symbol, interval=interval, limit=int(lookback))
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
    ])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    df = df.astype(float)
    return df

def analyze(df):
    stoch_rsi = StochRSIIndicator(df['close'], window=14, smooth1=3, smooth2=3)
    df['stoch_rsi'] = stoch_rsi.stochrsi_k()
    latest = df.iloc[-1]
    signal = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    if latest['stoch_rsi'] < 0.2:
        signal = "LONG"
    elif latest['stoch_rsi'] > 0.8:
        signal = "SHORT"
    return signal, latest

def plot_chart(df, symbol):
    fig, ax1 = plt.subplots(figsize=(10, 4))

    ax1.set_title(f"{symbol} ‚Äî –¶–µ–Ω–∞ –∏ Stoch RSI")
    ax1.plot(df.index, df['close'], label='–¶–µ–Ω–∞', color='black')
    ax1.set_ylabel("–¶–µ–Ω–∞")

    ax2 = ax1.twinx()
    ax2.plot(df.index, df['stoch_rsi'], label='Stoch RSI', color='purple', alpha=0.6)
    ax2.set_ylabel("Stoch RSI", color='purple')
    ax2.tick_params(axis='y', labelcolor='purple')
    ax2.set_ylim(0, 1)

    fig.tight_layout()
    return fig

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
for symbol in symbols:
    df = get_data(symbol, interval_map[timeframe])
    signal, latest = analyze(df)

    if not show_neutral and signal == "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ":
        continue

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    st.subheader(f"{symbol.replace('USDT', '')}/USDT ({timeframe})")

    if signal == "LONG":
        bg_color = "#d1f7c4"
        emoji = "üü¢"
    elif signal == "SHORT":
        bg_color = "#f8c4c4"
        emoji = "üî¥"
    else:
        bg_color = "#eeeeee"
        emoji = "‚è∏Ô∏è"

    with st.container():
        st.markdown(
            f"""
            <div style="background-color:{bg_color}; padding:10px; border-radius:10px">
            <h4>{emoji} <b>{signal}</b></h4>
            <p>‚è∞ –í—Ä–µ–º—è: {latest.name.strftime('%Y-%m-%d %H:%M:%S')}<br>
            üí∞ –í—Ö–æ–¥: {latest['close']:.2f}<br>
            üìç –°—Ç–æ–ø: {latest['close']*1.03:.2f} üéØ –¢–µ–π–∫: {latest['close']*0.97:.2f}</p>
            </div>
            """,
            unsafe_allow_html=True,
        )

    st.pyplot(plot_chart(df, symbol))
