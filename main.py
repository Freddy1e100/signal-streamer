import streamlit as st import pandas as pd import numpy as np import matplotlib.pyplot as plt from binance.client import Client from ta.momentum import StochRSIIndicator, RSIIndicator from datetime import datetime

Binance –±–µ–∑ API-–∫–ª—é—á–µ–π

client = Client()

–ù–∞—Å—Ç—Ä–æ–π–∫–∏

PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "PAXGUSDT"] SYMBOL_NAMES = { "BTCUSDT": "BTC/USDT", "ETHUSDT": "ETH/USDT", "SOLUSDT": "SOL/USDT", "PAXGUSDT": "PAXG/USDT" } TIMEFRAMES = { "15m": "15m", "1 —á–∞—Å": "1h", "4 —á–∞—Å–∞": "4h", "1 –¥–µ–Ω—å": "1d" }

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å

st.set_page_config(layout="wide") st.title("üìà Crypto Signal Streamer") st.markdown("–ü–æ–ª—É—á–∞–π —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ StochRSI –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏–ø—Ç–æ-–ø–∞—Ä–∞–º.")

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

selected_tf_label = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º", list(TIMEFRAMES.keys())) selected_tf = TIMEFRAMES[selected_tf_label] stop_pct = st.sidebar.number_input("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", value=3.0, step=0.5) take_pct = st.sidebar.number_input("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)", value=3.0, step=0.5) show_neutral = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ", value=True) update_btn = st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance

def get_data(symbol, interval="1h", limit=150): try: raw = client.get_klines(symbol=symbol, interval=interval, limit=limit) df = pd.DataFrame(raw, columns=[ "Open Time", "Open", "High", "Low", "Close", "Volume", "Close Time", "Quote Asset Volume", "Number of Trades", "Taker Buy Base", "Taker Buy Quote", "Ignore" ]) df["Open Time"] = pd.to_datetime(df["Open Time"], unit="ms") df.set_index("Open Time", inplace=True) df = df[["Open", "High", "Low", "Close", "Volume"]].astype(float) return df except Exception as e: return None

–ê–Ω–∞–ª–∏–∑ StochRSI

def analyze(df, symbol): try: stoch_rsi = StochRSIIndicator(close=df["Close"]) df["StochRSI"] = stoch_rsi.stochrsi() df["RSI"] = RSIIndicator(close=df["Close"]).rsi() df.dropna(inplace=True)

latest = df.iloc[-1]
    signal = "NEUTRAL"
    if latest["RSI"] < 30 and latest["StochRSI"] < 0.2:
        signal = "LONG"
    elif latest["RSI"] > 70 and latest["StochRSI"] > 0.8:
        signal = "SHORT"

    entry = latest["Close"]
    if signal == "LONG":
        stop = entry * (1 - stop_pct / 100)
        take = entry * (1 + take_pct / 100)
    elif signal == "SHORT":
        stop = entry * (1 + stop_pct / 100)
        take = entry * (1 - take_pct / 100)
    else:
        stop = take = np.nan

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    col = st.container()
    if signal != "NEUTRAL" or show_neutral:
        with col:
            st.markdown(f"### {SYMBOL_NAMES[symbol]}")
            st.markdown(f"""
            <div style="background-color: {'#d1f7c4' if signal=='LONG' else '#ffd1d1' if signal=='SHORT' else '#f0f0f0'};
                        padding: 10px; border-radius: 8px;">
                <strong>{'‚úÖ LONG' if signal == 'LONG' else 'üîª SHORT' if signal == 'SHORT' else '‚è∏Ô∏è NEUTRAL'}</strong><br>
                <strong>–í—Ä–µ–º—è:</strong> {df.index[-1]}<br>
                <strong>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</strong> {entry:.2f}<br>
                <strong>–°—Ç–æ–ø-–ª–æ—Å—Å:</strong> {stop:.2f} ({stop_pct}%)<br>
                <strong>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</strong> {take:.2f} ({take_pct}%)
            </div>
            """, unsafe_allow_html=True)

            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã + StochRSI
            fig, ax = plt.subplots(2, 1, figsize=(8, 5), sharex=True, gridspec_kw={'height_ratios': [3, 1]})
            df["Close"].plot(ax=ax[0], label="–¶–µ–Ω–∞", color="black")
            ax[0].set_title(f"{SYMBOL_NAMES[symbol]} –¶–µ–Ω–∞")
            ax[0].legend()

            df["StochRSI"].plot(ax=ax[1], color="purple", label="StochRSI")
            ax[1].axhline(0.8, color='red', linestyle='--')
            ax[1].axhline(0.2, color='green', linestyle='--')
            ax[1].set_ylim(0, 1)
            ax[1].set_title("Stochastic RSI")
            ax[1].legend()

            st.pyplot(fig)

except Exception as e:
    st.error(f"{SYMBOL_NAMES[symbol]} ‚Äî –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª

if update_btn or True: for pair in PAIRS: df = get_data(pair, interval=selected_tf) if df is not None: analyze(df, pair) else: st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {SYMBOL_NAMES[pair]}")

