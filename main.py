import streamlit as st
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
from binance.client import Client
from ta.momentum import RSIIndicator, StochRSIIndicator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Binance (–±–µ–∑ –∫–ª—é—á–µ–π)
client = Client()

# –ü–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "PAXGUSDT"]
SYMBOL_NAMES = {
    "BTCUSDT": "BTC/USDT",
    "ETHUSDT": "ETH/USDT",
    "SOLUSDT": "SOL/USDT",
    "PAXGUSDT": "PAXG/USDT"
}
TIMEFRAME = "1h"
LIMIT = 150

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="Crypto Signals", layout="wide")
st.title("üìà –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã (Binance)")
st.markdown("–ü–æ–ª—É—á–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º.")

refresh = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def get_binance_data(symbol, interval="1h", limit=150):
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
        df = pd.DataFrame(klines, columns=[
            "Open Time", "Open", "High", "Low", "Close", "Volume",
            "Close Time", "Quote Asset Volume", "Number of Trades",
            "Taker Buy Base", "Taker Buy Quote", "Ignore"
        ])
        df["Open Time"] = pd.to_datetime(df["Open Time"], unit="ms")
        df.set_index("Open Time", inplace=True)
        df = df[["Open", "High", "Low", "Close", "Volume"]].astype(float)
        return df
    except Exception as e:
        return None

# –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã
def analyze(df, symbol):
    try:
        stoch = StochRSIIndicator(close=df["Close"])
        df["StochRSI"] = stoch.stochrsi()

        rsi = RSIIndicator(close=df["Close"])
        df["RSI"] = rsi.rsi()

        df.dropna(inplace=True)
        last = df.iloc[-1]

        signal = "‚è∏Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        if last["RSI"] < 30 and last["StochRSI"] < 0.2:
            signal = "‚úÖ LONG"
        elif last["RSI"] > 70 and last["StochRSI"] > 0.8:
            signal = "üîª SHORT"

        entry_price = round(last["Close"], 2)
        stop_loss = round(entry_price * (0.97 if signal == "‚úÖ LONG" else 1.03), 2)
        take_profit = round(entry_price * (1.03 if signal == "‚úÖ LONG" else 0.97), 2)

        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ StochRSI
        fig, ax1 = plt.subplots(figsize=(7, 4))
        ax2 = ax1.twinx()

        df["Close"].plot(ax=ax1, color="black", label="–¶–µ–Ω–∞")
        df["StochRSI"].plot(ax=ax2, color="purple", label="StochRSI", alpha=0.6)

        ax1.set_ylabel("–¶–µ–Ω–∞", color="black")
        ax2.set_ylabel("StochRSI", color="purple")
        ax2.axhline(0.8, color='red', linestyle='--', linewidth=1)
        ax2.axhline(0.2, color='green', linestyle='--', linewidth=1)
        ax2.set_ylim(0, 1)

        lines, labels = ax1.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax1.legend(lines + lines2, labels + labels2, loc='upper left')
        ax1.grid(True)
        ax1.set_title(f"{SYMBOL_NAMES[symbol]} ‚Äî –¶–µ–Ω–∞ –∏ Stoch RSI")

        # –í—ã–≤–æ–¥
        st.pyplot(fig)
        with st.container():
            st.markdown(f"### {SYMBOL_NAMES[symbol]}")
            st.markdown(f"""
            **{signal}**  
            ‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: `{df.index[-1]}`  
            üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{entry_price}`  
            üìç –°—Ç–æ–ø-–ª–æ—Å—Å: `{stop_loss}`  
            üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: `{take_profit}`
            """)
    except Exception as e:
        st.markdown(f"### {SYMBOL_NAMES[symbol]}")
        st.error(f"–û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥
if refresh or True:
    for pair in PAIRS:
        df = get_binance_data(pair, interval=TIMEFRAME, limit=LIMIT)
        if df is None or len(df) < 60:
            st.markdown(f"### {SYMBOL_NAMES[pair]}")
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        else:
            analyze(df, pair)
