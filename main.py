import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance.client import Client
from ta.trend import EMAIndicator
from ta.momentum import RSIIndicator, StochRSIIndicator

# Binance API –±–µ–∑ –∫–ª—é—á–µ–π
client = Client()

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã Binance
TIMEFRAMES = {
    "15 –º–∏–Ω—É—Ç": "15m",
    "1 —á–∞—Å": "1h",
    "4 —á–∞—Å–∞": "4h",
    "1 –¥–µ–Ω—å": "1d"
}

PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "PAXGUSDT"]
SYMBOL_NAMES = {
    "BTCUSDT": "BTC/USDT",
    "ETHUSDT": "ETH/USDT",
    "SOLUSDT": "SOL/USDT",
    "PAXGUSDT": "PAXG/USDT"
}

# === SIDEBAR –ù–ê–°–¢–†–û–ô–ö–ò ===
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
timeframe_name = st.sidebar.selectbox("‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º", list(TIMEFRAMES.keys()), index=1)
TIMEFRAME = TIMEFRAMES[timeframe_name]
stop_pct = st.sidebar.slider("üìâ –°—Ç–æ–ø-–ª–æ—Å—Å %", min_value=1, max_value=10, value=3)
take_pct = st.sidebar.slider("üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç %", min_value=1, max_value=10, value=3)
hide_neutral = st.sidebar.checkbox("–°–∫—Ä—ã—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", value=False)

# === –ó–ê–ì–û–õ–û–í–û–ö ===
st.title("üì° Signal Streamer")
st.markdown("–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏–ø—Ç–æ-–ø–∞—Ä–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")

# === –§–£–ù–ö–¶–ò–Ø –î–ê–ù–ù–´–• ===
def get_binance_data(symbol, interval="1h", limit=150):
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
        df = pd.DataFrame(klines, columns=[
            "Open Time", "Open", "High", "Low", "Close", "Volume",
            "Close Time", "Quote Asset Volume", "Number of Trades",
            "Taker Buy Base", "Taker Buy Quote", "Ignore"
        ])
        df["Open Time"] = pd.to_datetime(df["Open Time"], unit="ms")
        df.set_index("Open Time", inplace=True)
        df = df[["Open", "High", "Low", "Close", "Volume"]].astype(float)
        return df
    except Exception as e:
        return None

# === –ê–ù–ê–õ–ò–ó –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ===
def analyze(df, symbol):
    try:
        df["EMA"] = EMAIndicator(close=df["Close"], window=50).ema_indicator()
        df["RSI"] = RSIIndicator(close=df["Close"]).rsi()
        df["StochRSI"] = StochRSIIndicator(close=df["Close"]).stochrsi()
        df.dropna(inplace=True)

        latest = df.iloc[-1]
        signal = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        if latest["RSI"] < 30 and latest["StochRSI"] < 0.2:
            signal = "LONG"
        elif latest["RSI"] > 70 and latest["StochRSI"] > 0.8:
            signal = "SHORT"

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–æ–ø –∏ —Ç–µ–π–∫
        entry = latest["Close"]
        stop = entry * (1 - stop_pct / 100) if signal == "LONG" else entry * (1 + stop_pct / 100)
        take = entry * (1 + take_pct / 100) if signal == "LONG" else entry * (1 - take_pct / 100)

        # –ü—Ä–æ–≥–Ω–æ–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        score = 0
        if latest["RSI"] < 30: score += 1
        if latest["StochRSI"] < 0.2: score += 1
        if latest["Close"] > latest["EMA"]: score += 1
        confidence = int((score / 3) * 100)

        # –°–∫—Ä—ã—Ç–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –ø–æ –∂–µ–ª–∞–Ω–∏—é
        if hide_neutral and signal == "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ":
            return

        # –¶–≤–µ—Ç–æ–≤–∞—è –∑–∞–ª–∏–≤–∫–∞
        bg_color = "#d1f7c4" if signal == "LONG" else "#f8c4c4" if signal == "SHORT" else "#eeeeee"
        emoji = "üü¢" if signal == "LONG" else "üî¥" if signal == "SHORT" else "‚è∏Ô∏è"

        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å–∏–≥–Ω–∞–ª–∞
        st.markdown(
            f"""
            <div style="background-color:{bg_color}; padding:15px; border-radius:10px; line-height:1.6">
                <h3 style="margin-bottom:0;">{emoji} <b>{SYMBOL_NAMES[symbol]} - {signal}</b></h3>
                <p style="margin:0;">üïí <b>–í—Ä–µ–º—è:</b> {latest.name.strftime('%Y-%m-%d %H:%M')}</p>
                <p style="margin:0;">üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {entry:.2f}</p>
                <p style="margin:0;">üìâ <b>–°—Ç–æ–ø:</b> {stop:.2f} &nbsp;&nbsp;&nbsp; üéØ <b>–¢–µ–π–∫:</b> {take:.2f}</p>
                <p style="margin:0;">ü§ñ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞:</b> {confidence}%</p>
            </div>
            """,
            unsafe_allow_html=True,
        )

        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã + —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫ RSI
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 4), sharex=True, gridspec_kw={'height_ratios': [3, 1]})
        df["Close"].plot(ax=ax1, label="–¶–µ–Ω–∞")
        ax1.set_title(f"{SYMBOL_NAMES[symbol]} - –¶–µ–Ω–∞")
        ax1.legend()

        df["StochRSI"].plot(ax=ax2, label="StochRSI", color="orange")
        ax2.axhline(0.2, linestyle="--", color="gray", linewidth=1)
        ax2.axhline(0.8, linestyle="--", color="gray", linewidth=1)
        ax2.set_ylim(0, 1)
        ax2.set_title("StochRSI")
        ax2.legend()

        st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–û –ü–ê–†–ê–ú ===
for pair in PAIRS:
    df = get_binance_data(pair, interval=TIMEFRAME, limit=150)
    if df is None or len(df) < 60:
        st.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {SYMBOL_NAMES[pair]}")
    else:
        analyze(df, pair)
