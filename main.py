import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance.client import Client
from ta.momentum import StochRSIIndicator, RSIIndicator
from datetime import datetime

# Binance public client
client = Client()

# Streamlit UI
st.set_page_config(layout="wide")
st.title("üìä Signal Streamer: –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PAIRS = {
    "BTCUSDT": "BTC/USDT",
    "ETHUSDT": "ETH/USDT",
    "SOLUSDT": "SOL/USDT",
    "PAXGUSDT": "PAXG/USDT"
}
TIMEFRAMES = {"15m": "15 –º–∏–Ω—É—Ç", "1h": "1 —á–∞—Å", "4h": "4 —á–∞—Å–∞", "1d": "1 –¥–µ–Ω—å"}
tf_choice = st.sidebar.selectbox("‚è±Ô∏è –í—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º", list(TIMEFRAMES.keys()), format_func=lambda x: TIMEFRAMES[x])
show_neutral = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", value=True)
take_pct = st.sidebar.slider("üéØ Take-Profit (%)", 0.5, 10.0, 3.0)
stop_pct = st.sidebar.slider("‚ùå Stop-Loss (%)", 0.5, 10.0, 3.0)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def get_binance_data(symbol, interval="1h", limit=150):
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
        df = pd.DataFrame(klines, columns=[
            "Open Time", "Open", "High", "Low", "Close", "Volume",
            "Close Time", "Quote Asset Volume", "Number of Trades",
            "Taker Buy Base", "Taker Buy Quote", "Ignore"
        ])
        df["Open Time"] = pd.to_datetime(df["Open Time"], unit="ms")
        df.set_index("Open Time", inplace=True)
        df = df[["Open", "High", "Low", "Close", "Volume"]].astype(float)
        return df
    except Exception as e:
        return None

# –ê–Ω–∞–ª–∏–∑
def analyze(df):
    rsi = RSIIndicator(close=df["Close"])
    df["RSI"] = rsi.rsi()

    stoch = StochRSIIndicator(close=df["Close"])
    df["StochRSI"] = stoch.stochrsi()

    df.dropna(inplace=True)
    last = df.iloc[-1]

    signal = "‚è∏Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    if last["RSI"] < 30 and last["StochRSI"] < 0.2:
        signal = "‚úÖ LONG"
    elif last["RSI"] > 70 and last["StochRSI"] > 0.8:
        signal = "üîª SHORT"

    entry_price = round(last["Close"], 2)
    stop = round(entry_price * (1 - stop_pct / 100), 2) if signal == "‚úÖ LONG" else round(entry_price * (1 + stop_pct / 100), 2)
    take = round(entry_price * (1 + take_pct / 100), 2) if signal == "‚úÖ LONG" else round(entry_price * (1 - take_pct / 100), 2)

    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction = "üìà –í–µ—Ä–æ—è—Ç–µ–Ω —Ä–æ—Å—Ç" if last["RSI"] > 50 else "üìâ –í–µ—Ä–æ—è—Ç–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ"
    probability = round(abs(last["RSI"] - 50) / 50 * 100, 1)
    trend = f"üß† –ü—Ä–æ–≥–Ω–æ–∑: {direction} ({probability}%)"

    return signal, entry_price, stop, take, df, trend

# –ì—Ä–∞—Ñ–∏–∫
def plot_chart(df, name):
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 7), sharex=True, gridspec_kw={'height_ratios': [3, 1, 1]})
    
    # –¶–µ–Ω–∞
    ax1.plot(df.index, df["Close"], label="–¶–µ–Ω–∞", color="blue")
    ax1.set_title(f"{name} ‚Äî –¶–µ–Ω–∞")
    ax1.grid(True)
    ax1.legend()

    # RSI
    ax2.plot(df.index, df["RSI"], label="RSI", color="orange")
    ax2.axhline(70, color="red", linestyle="--")
    ax2.axhline(30, color="green", linestyle="--")
    ax2.set_ylabel("RSI")
    ax2.grid(True)
    ax2.legend()

    # Stoch RSI
    ax3.plot(df.index, df["StochRSI"], label="Stoch RSI", color="purple")
    ax3.axhline(0.8, color="red", linestyle="--")
    ax3.axhline(0.2, color="green", linestyle="--")
    ax3.set_ylabel("Stoch RSI")
    ax3.grid(True)
    ax3.legend()

    plt.tight_layout()
    st.pyplot(fig)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –ø–∞—Ä–∞–º
for symbol, name in PAIRS.items():
    df = get_binance_data(symbol, interval=tf_choice, limit=150)
    if df is None or len(df) < 50:
        st.error(f"{name}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        continue

    signal, entry, sl, tp, df, trend = analyze(df)

    if not show_neutral and signal == "‚è∏Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ":
        continue

    st.markdown(f"---\n### {name}")
    st.markdown(
        f"**–°–∏–≥–Ω–∞–ª:** {signal}  \n"
        f"üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** `{entry}`  \n"
        f"‚ùå **–°—Ç–æ–ø-–ª–æ—Å—Å:** `{sl}`  \n"
        f"üéØ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** `{tp}`  \n"
        f"{trend}  \n"
        f"üïí –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: `{df.index[-1]}`"
    )

    plot_chart(df, name)
